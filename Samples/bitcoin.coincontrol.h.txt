#ifndef BITCOIN_WALLET_COINCONTROL_H
#define BITCOIN_WALLET_COINCONTROL_H

#include <optional.h>
#include <outputtype.h>
#include <policy/feerate.h>
#include <policy/fees.h>
#include <primitives/transaction.h>
#include <script/standard.h>

const int DEFAULT_MIN_DEPTH = 0;
const int DEFAULT_MAX_DEPTH = 9999999;

static constexpr bool DEFAULT_AVOIDPARTIALSPENDS = false;

class CCoinControl
{
public:

    CTxDestination destChange;
    optional<OutputType> m_change_type;
    bool fAllowOtherInputs;
    bool fAllowWatchOnly;
    bool fOverrideFeeRate;
    Optional<CFeeRate> m_feerate;
    Optional<unsigned int> m_confirm_target;
    Optional<bool> m_signal_bip125_rbf;
    bool m_avoid_partial_spends;
    bool m_avoid_address_reuse;
    FeeEstimateMode m_fee_mode;
    int m_min_depth = DEFAULT_MIN_DEPTH;
    int m_max_depth = DEFAULT_MAX_DEPTH;

    CCoinControl()
    {
        SetNull();
    }

    void SetNull();

    bool HasSelected() const
    {
        return (setSelected.size() > 0);
    }

    bool IsSelected(const COutPoint& output) const
    {
        return (setSelected.count(output) > 0);
    }

    void Select(const COutPoint& output)
    {
        setSelected.insert(output);
    }

    void UnSelect(const COutPoint& output)
    {
        setSelected.erase(output);
    }

    void UnSelectAll()
    {
        setSelected.clear();
    }

    void ListSelected(std::vector<COutPoint>& vOutpoints) const
    {
        vOutpoints.assign(setSelected.begin(), setSelected.end());
    }

private:
    std::set<COutPoint> setSelected;
};

#endif